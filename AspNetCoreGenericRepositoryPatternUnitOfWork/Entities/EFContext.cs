// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace AspNetCoreGenericRepositoryPatternUnitOfWork.Entities
{
    public partial class EFContext : DbContext
    {
        public EFContext()
        {
        }

        public EFContext(DbContextOptions<EFContext> options) : base(options)
        {

        }

        public virtual DbSet<BackendMenu> BackendMenus { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAuthorization> UserAuthorizations { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<VUsergroup> VUsergroups { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=YAKUPPC;Initial Catalog=FarmerNews;Integrated Security=True; MultipleActiveResultSets=true ");
                //optionsBuilder.EnableSensitiveDataLogging();
            }
            //optionsBuilder.UseLazyLoadingProxies();

            //// Do NOT enable proxied entities, else serialization fails
            //DbContext.Configuration.ProxyCreationEnabled = false;

            //// Load navigation properties explicitly (avoid serialization trouble)
            //DbContext.Configuration.LazyLoadingEnabled = false;

            //// Because Web API will perform validation, we don't need/want EF to do so
            //DbContext.Configuration.ValidateOnSaveEnabled = false;

            /*
            Indexes can not be created using data annotations.
                    modelBuilder.Entity<Person>()
            .HasIndex(e => e.UserName)
            .IsUnique()
            .ForSqlServerIsClustered();
            */
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BackendMenu>(entity =>
            {
                entity.Property(e => e.Isactive).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ismanager).HasDefaultValueSql("((0))");

                entity.Property(e => e.MenuGroupNumber).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Isactive).HasDefaultValueSql("((1))");

                entity.Property(e => e.Modified).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.Groupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USERS_USER_GROUPS1");

                entity.HasOne(d => d.Usertype)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.Usertypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USERS_USER_TYPES");
            });

            modelBuilder.Entity<UserAuthorization>(entity =>
            {
                entity.HasKey(e => new { e.BakendMenuId, e.Groupid });

                entity.Property(e => e.Created).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Isdelete).HasDefaultValueSql("((0))");

                entity.Property(e => e.Islist).HasDefaultValueSql("((0))");

                entity.Property(e => e.Issave).HasDefaultValueSql("((0))");

                entity.Property(e => e.Isupdate).HasDefaultValueSql("((0))");

                entity.Property(e => e.Modified).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.BakendMenu)
                    .WithMany(p => p.UserAuthorizations)
                    .HasForeignKey(d => d.BakendMenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USER_AUTHORIZATIONS_BACKEND_MENUS");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.UserAuthorizations)
                    .HasForeignKey(d => d.Groupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USER_AUTHORIZATIONS_USER_GROUPS");
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.Property(e => e.Isactive).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsautomaticCategory).HasDefaultValueSql("((0))");

                entity.Property(e => e.Isdelete).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<VUsergroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_USERGROUP");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}